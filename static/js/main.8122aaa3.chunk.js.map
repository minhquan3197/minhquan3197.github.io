{"version":3,"sources":["components/Skills.jsx","components/Profile.jsx","components/Project.jsx","components/Experience.jsx","components/Link.jsx","views/Home.jsx","global/GlobalLayout.jsx","routes.js","global/GlobalRoute.jsx","App.js","serviceWorker.js","index.js"],"names":["TabPane","Tabs","columnsBackend","title","dataIndex","key","render","text","width","Skills","defaultActiveKey","tab","rowKey","pagination","pageSize","columns","dataSource","skills","programming","sort","a","b","project","backend","frontend","devops","database","Meta","Card","Profile","cover","alt","src","actions","type","onClick","window","open","style","fontWeight","description","Title","Typography","data","listData","reverse","Project","level","marginTop","itemLayout","size","renderItem","item","Item","content","experiences","slice","Math","max","length","educations","Experience","map","id","xs","sm","md","lg","xl","name","position","year","image","Link","networks","network","float","background","color","border","icon","href","link","target","Home","gutter","paddingRight","Content","Layout","AOS","init","duration","routes","path","exact","main","layout","props","className","data-aos","children","GlobalRoute","Component","component","rest","App","result","route","index","showContent","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8122aaa3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Tabs, Table } from 'antd';\r\nimport skills from '../data/skills.json';\r\n\r\nconst { TabPane } = Tabs;\r\nconst columnsBackend = [\r\n    {\r\n        title: 'Skill',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n        render: (text) => <b>{text}</b>,\r\n        width: 150,\r\n    },\r\n    {\r\n        title: 'Project used',\r\n        dataIndex: 'project',\r\n        key: 'project',\r\n        width: 150,\r\n    },\r\n];\r\n\r\nconst Skills = () => {\r\n    return (\r\n        <>\r\n            <Tabs defaultActiveKey=\"1\">\r\n                <TabPane tab=\"Programming Language\" key=\"1\">\r\n                    <Table\r\n                        rowKey=\"id\"\r\n                        pagination={{\r\n                            pageSize: 4,\r\n                        }}\r\n                        columns={columnsBackend}\r\n                        dataSource={skills.programming.sort((a, b) => (a.project < b.project) ? 1 : -1)}\r\n                    />\r\n                </TabPane>\r\n                <TabPane tab=\"Back-end\" key=\"2\">\r\n                    <Table\r\n                        rowKey=\"id\"\r\n                        pagination={{\r\n                            pageSize: 4,\r\n                        }}\r\n                        columns={columnsBackend}\r\n                        dataSource={skills.backend.sort((a, b) => (a.project < b.project) ? 1 : -1)}\r\n                    />\r\n                </TabPane>\r\n                <TabPane tab=\"Front-end\" key=\"3\">\r\n                    <Table\r\n                        rowKey=\"id\"\r\n                        pagination={{\r\n                            pageSize: 4,\r\n                        }}\r\n                        columns={columnsBackend}\r\n                        dataSource={skills.frontend.sort((a, b) => (a.project < b.project) ? 1 : -1)}\r\n                    />\r\n                </TabPane>\r\n                <TabPane tab=\"Devops\" key=\"4\">\r\n                    <Table\r\n                        rowKey=\"id\"\r\n                        pagination={{\r\n                            pageSize: 4,\r\n                        }}\r\n                        columns={columnsBackend}\r\n                        dataSource={skills.devops.sort((a, b) => (a.project < b.project) ? 1 : -1)}\r\n                    />\r\n                </TabPane>\r\n                <TabPane tab=\"Database\" key=\"5\">\r\n                    <Table\r\n                        rowKey=\"id\"\r\n                        pagination={{\r\n                            pageSize: 4,\r\n                        }}\r\n                        columns={columnsBackend}\r\n                        dataSource={skills.database}\r\n                    />\r\n                </TabPane>\r\n            </Tabs>\r\n        </>\r\n    );\r\n};\r\nexport default Skills;\r\n","import React from 'react';\r\nimport { Card, Icon } from 'antd';\r\n\r\nconst { Meta } = Card;\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <>\r\n            <Card\r\n                cover={\r\n                    <img\r\n                        alt=\"Quân Nguyễn\"\r\n                        src=\"https://res.cloudinary.com/kori/image/upload/v1547055160/me.jpg\"\r\n                    />\r\n                }\r\n                actions={[\r\n                    <Icon\r\n                        type=\"download\"\r\n                        key=\"download\"\r\n                        onClick={() =>\r\n                            window.open(\r\n                                'https://drive.google.com/open?id=1gji1wPYP3h9WFeWp042qUnFnZSmLJDAy',\r\n                                '_blank',\r\n                            )\r\n                        }\r\n                    />,\r\n                ]}\r\n            >\r\n                <Meta title=\"Nguyễn Minh Quân\" />\r\n                <Meta style={{ fontWeight: 'bold' }} description=\"Back-end Developer\" />\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\nexport default Profile;\r\n","import React from 'react';\r\nimport { Typography, List } from 'antd';\r\nimport listData from '../data/projects.json';\r\n\r\nconst { Title } = Typography;\r\nconst data = listData.reverse();\r\n\r\nconst Project = () => {\r\n    return (\r\n        <>\r\n            <Title level={2} style={{ marginTop: 10 }}>\r\n                Projects\r\n            </Title>\r\n            <List\r\n                itemLayout=\"vertical\"\r\n                size=\"large\"\r\n                pagination={{\r\n                    pageSize: 2,\r\n                }}\r\n                dataSource={data}\r\n                renderItem={(item) => (\r\n                    <List.Item key={item.title}>\r\n                        <List.Item.Meta title={item.title} description={item.description} />\r\n                        {item.content}\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </>\r\n    );\r\n};\r\nexport default Project;\r\n","import React from 'react';\r\nimport { Tabs, Row, Col, Timeline } from 'antd';\r\nimport listData from '../data/timeline.json';\r\n\r\nconst { TabPane } = Tabs;\r\nconst experiences = listData.experiences\r\n    .slice(Math.max(listData.experiences.length - 3, 1))\r\n    .reverse();\r\nconst educations = listData.educations.reverse();\r\nconst Experience = () => {\r\n    return (\r\n        <>\r\n            <Tabs defaultActiveKey=\"1\">\r\n                <TabPane tab=\"Experience\" key=\"1\">\r\n                    <Timeline>\r\n                        {experiences.map((data) => (\r\n                            <Timeline.Item key={data.id}>\r\n                                <Row>\r\n                                    <Col xs={24} sm={24} md={4} lg={4} xl={4}>\r\n                                        <b>{data.name}</b>\r\n                                        <p>{data.position}</p>\r\n                                        <p>{data.year}</p>\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24} md={20} lg={20} xl={20}>\r\n                                        <img\r\n                                            style={{ width: '75px' }}\r\n                                            src={data.image}\r\n                                            alt={data.name}\r\n                                        />\r\n                                    </Col>\r\n                                </Row>\r\n                            </Timeline.Item>\r\n                        ))}\r\n                    </Timeline>\r\n                </TabPane>\r\n                <TabPane tab=\"Education\" key=\"2\">\r\n                    <Timeline>\r\n                        {educations.map((data) => (\r\n                            <Timeline.Item key={data.id}>\r\n                                <b>{data.name}</b>\r\n                                <p>{data.position}</p>\r\n                                <p>{data.year}</p>\r\n                            </Timeline.Item>\r\n                        ))}\r\n                    </Timeline>\r\n                </TabPane>\r\n            </Tabs>\r\n        </>\r\n    );\r\n};\r\nexport default Experience;\r\n","import React from 'react';\r\nimport { Card, Button } from 'antd';\r\nimport networks from '../data/networks.json';\r\n\r\nconst Link = () => {\r\n    return (\r\n        <>\r\n            <Card title=\"Social Networks\">\r\n                {networks.map((network) => (\r\n                    <p key={network.id}>\r\n                        <b>{network.name}</b>\r\n                        <Button\r\n                            style={{\r\n                                float: 'right',\r\n                                background: network.color,\r\n                                border: 'none',\r\n                            }}\r\n                            type=\"primary\"\r\n                            icon={network.icon}\r\n                            href={network.link}\r\n                            target=\"_blank\"\r\n                        >\r\n                            Link\r\n                        </Button>\r\n                    </p>\r\n                ))}\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\nexport default Link;\r\n","import React from 'react';\r\nimport { Row, Col } from 'antd';\r\nimport Skills from '../components/Skills';\r\nimport Profile from '../components/Profile';\r\nimport Project from '../components/Project';\r\nimport Experience from '../components/Experience';\r\nimport Link from '../components/Link';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <>\r\n            <Row gutter={16}>\r\n                <Col xs={24} sm={24} md={12} lg={8} xl={4} style={{ paddingRight: 10 }}>\r\n                    <div>\r\n                        <Profile />\r\n                    </div>\r\n                    <div style={{ marginTop: '10px' }}>\r\n                        <Link />\r\n                    </div>\r\n                </Col>\r\n                <Col xs={24} sm={24} md={12} lg={16} xl={20}>\r\n                    <Row gutter={16}>\r\n                        <Col xs={24} sm={24} md={24} lg={24} xl={12}>\r\n                            <Experience />\r\n                        </Col>\r\n                        <Col xs={24} sm={24} md={24} lg={24} xl={12}>\r\n                            <Skills />\r\n                        </Col>\r\n                    </Row>\r\n                    <div>\r\n                        <Project />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\nexport default Home;\r\n","import React from 'react';\r\nimport AOS from 'aos';\r\nimport { Layout } from 'antd';\r\nconst { Content } = Layout;\r\nAOS.init({\r\n    duration: 1000,\r\n});\r\n\r\nconst GeneralLayout = props => {\r\n    return (\r\n        <>\r\n            <Content className=\"content\" data-aos=\"fade-left\">\r\n                {props.children}\r\n            </Content>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GeneralLayout;\r\n","import Home from './views/Home';\r\n// Layout\r\nimport GlobalLayout from './global/GlobalLayout';\r\nconst routes = [\r\n    {\r\n        path: \"/\",\r\n        exact: true,\r\n        main: Home,\r\n        layout: GlobalLayout,\r\n    },\r\n];\r\n\r\nexport default routes;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst GlobalRoute = ({ component: Component, layout: Layout, ...rest }) => (\r\n    <Route\r\n        {...rest}\r\n        render={props => (\r\n            <Layout>\r\n                <Component {...props} />\r\n            </Layout>\r\n        )}\r\n    />\r\n);\r\n\r\nexport default GlobalRoute;\r\n","import React from 'react';\r\nimport { Switch, HashRouter } from 'react-router-dom';\r\nimport routes from './routes';\r\nimport GlobalRoute from './global/GlobalRoute';\r\nimport { Layout } from 'antd';\r\n// CSS\r\nimport 'aos/dist/aos.css';\r\nimport 'antd/dist/antd.css';\r\nimport './global/index.scss';\r\n\r\nconst App = () => {\r\n    const showContent = routes => {\r\n        var result = null;\r\n        if (routes.length > 0) {\r\n            result = routes.map((route, index) => {\r\n                return (\r\n                    <GlobalRoute\r\n                        key={index}\r\n                        path={route.path}\r\n                        exact={route.exact}\r\n                        component={route.main}\r\n                        layout={route.layout}\r\n                    />\r\n                );\r\n            });\r\n        }\r\n        return <Switch>{result}</Switch>;\r\n    };\r\n\r\n    return (\r\n        <Layout>\r\n            <HashRouter>\r\n                {showContent(routes)}\r\n            </HashRouter>\r\n        </Layout>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}